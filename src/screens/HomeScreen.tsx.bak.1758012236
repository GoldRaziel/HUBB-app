import { onAuthStateChanged, signOut, User } from "firebase/auth";
import { auth } from "../lib/firebase";
import React, { useEffect, useMemo, useState } from "react";
import { View, Text, TextInput, FlatList, StyleSheet, Pressable, ActivityIndicator } from "react-native";
import * as Location from "expo-location";
import VenueCard from "../components/VenueCard";
import venuesData from "../data/mock_venues.json";
import { BEER_BRANDS } from "../data/brands";
import { haversineKm } from "../utils/distance";
import { Ionicons } from "@expo/vector-icons";
import LangSelector from "../components/LangSelector";
import { useLang } from "../context/LangContext";

type Lang = "en"|"it"|"ar";
const STR:any = {
  en:{ home:"Nearby venues", search:"Search by name, area...", filters:"Filters", beer:"Beer", wine:"Wine", both:"Both", cocktail:"Cocktail", brands:"Brands", near:"Near me" },
  it:{ home:"Locali vicini", search:"Cerca per nome, zona...", filters:"Filtri", beer:"Birra", wine:"Vino", both:"Entrambi", cocktail:"Cocktail", brands:"Marche", near:"Vicino a me" },
  ar:{ home:"أماكن قريبة", search:"ابحث بالاسم أو المنطقة...", filters:"فلاتر", beer:"بيرة", wine:"نبيذ", both:"كلاهما", cocktail:"كوكتيل", brands:"العلامات", near:"بالقرب مني" },
};

type Venue = { id:string; name:string; address:string; phone?:string; lat:number; lng:number; categories:string[]; brands:string[]; distanceKm?:number; };

export default function HomeScreen(){
  const { lang, isRTL } = useLang();
  const T=STR[lang];

  const [q,setQ]=useState("");
  const [selectedTypes,setSelectedTypes]=useState<string[]>([]);      // multi: beer/wine/cocktail
  const [selectedBrands,setSelectedBrands]=useState<string[]>([]);    // solo nel drawer
  const [nearby,setNearby]=useState(false);
  const [myPos,setMyPos]=useState<{lat:number,lng:number}|null>(null);
  const [loadingLoc,setLoadingLoc]=useState(false);

  const [user,setUser] = useState<User|null>(null);
  const [menuOpen, setMenuOpen] = useState(false);

  useEffect(()=>{
    const unsub = onAuthStateChanged(auth, (u)=>setUser(u));
    return () => unsub();
  },[]);

  const all:Venue[] = venuesData as any;

  useEffect(()=>{
    if(!nearby) return;
    (async()=>{
      try{
        setLoadingLoc(true);
        const {status} = await Location.requestForegroundPermissionsAsync();
        if(status!=="granted"){ setNearby(false); return; }
        const loc = await Location.getCurrentPositionAsync({});
        setMyPos({lat: loc.coords.latitude, lng: loc.coords.longitude});
      } finally { setLoadingLoc(false); }
    })();
  },[nearby]);

  const data = useMemo(()=>{
    let arr = [...all];
    if (myPos) arr = arr.map(v=>({...v, distanceKm:haversineKm(myPos, {lat:v.lat,lng:v.lng})}));
    if (q.trim()){
      const s=q.trim().toLowerCase();
      arr = arr.filter(v => (v.name+" "+v.address).toLowerCase().includes(s));
    }
    if (selectedTypes.length){
      arr = arr.filter(v => selectedTypes.some(t => v.categories.includes(t)));
    }
    if (selectedBrands.length){
      arr = arr.filter(v => selectedBrands.every(b => v.brands.includes(b)));
    }
    if (myPos && nearby){
      arr.sort((a,b)=>(a.distanceKm??999)-(b.distanceKm??999));
    } else {
      arr.sort((a,b)=>a.name.localeCompare(b.name));
    }
    return arr;
  },[all,q,selectedTypes,selectedBrands,myPos,nearby]);

  function toggleBrand(b:string){
    setSelectedBrands(prev => prev.includes(b) ? prev.filter(x=>x!==b) : [...prev,b]);
  }
  function toggleType(k:"beer"|"wine"|"cocktail"){
    setSelectedTypes(prev => prev.includes(k) ? prev.filter(x=>x!==k) : [...prev,k]);
  }

  return (
    <View style={[styles.wrap, isRTL && styles.rtl]}>
      <View style={styles.topbar}>
        {/* Hamburger a sinistra */}
        <Pressable
          onPress={()=>setMenuOpen(true)}
          style={styles.hamburgerBtn}
          accessibilityLabel="Open menu"
          accessibilityRole="button"
        >
          <Ionicons name="menu" size={18} color="#fff" />
        </Pressable>

        {/* Titolo rimosso; user/Logout saranno nel drawer */}

        <View style={styles.searchBox}>
          <Ionicons name="search" size={18} color="#888"/>
          <TextInput
            value={q} onChangeText={setQ}
            placeholder={T.search} placeholderTextColor="#999"
            style={styles.searchInput}
          />
        </View>

        {/* In pagina: solo Birra/Vino/Cocktail (multi) + Vicino a me */}
        <View style={styles.filtersRow}>
          {(["beer","wine","cocktail"] as const).map(k=>(
            <Pressable
              key={k}
              onPress={()=>toggleType(k)}
              style={[styles.pill, selectedTypes.includes(k) && styles.pillActive]}>
              <Text style={[styles.pillTxt, selectedTypes.includes(k) && styles.pillTxtActive]}>
                {T[k]}
              </Text>
            </Pressable>
          ))}
          <Pressable onPress={()=>setNearby(x=>!x)} style={[styles.pill, nearby && styles.pillActive]}>
            {loadingLoc ? <ActivityIndicator/> : <Ionicons name="navigate-outline" size={16} color={nearby?"#000":"#E6E6E6"}/>}
            <Text style={[styles.pillTxt, nearby && styles.pillTxtActive]}>{T.near}</Text>
          </Pressable>
        </View>
      </View>

      <FlatList
        contentContainerStyle={{padding:16}}
        data={data}
        keyExtractor={item=>item.id}
        renderItem={({item})=><VenueCard venue={item}/>}
      />
      {/* Drawer laterale personalizzato */}
      <View style={styles.drawer}>
        <View style={styles.userBox}>
          <FontAwesome name="user-circle" size={22} color="#000" style={{ marginRight: 6 }} />
          <Text style={styles.userTxt}>{user?.email || "Guest"}</Text>
        </View>
        <View style={styles.langRow}>
          {["en","it","ar"].map((lng)=>(
            <Pressable key={lng} onPress={()=>setLang(lng)}
              style={[styles.langBtn, lang===lng && styles.langBtnActive]} >
              <Text style={[styles.langTxt, lang===lng && styles.langTxtActive]}>{lng.toUpperCase()}</Text>
            </Pressable>
          ))}
        </View>
        <View style={styles.filterBox}>
          {Object.keys(T).map((k)=>(
            <Pressable key={k} onPress={()=>toggleType(k)}
              style={[styles.pillDrawer, selectedTypes.includes(k) && styles.pillActiveDrawer]} >
              <Text style={[styles.pillTxtDrawer, selectedTypes.includes(k) && styles.pillTxtActiveDrawer]}>{T[k]}</Text>
            </Pressable>
          ))}
        
        <View style={styles.logoutRow}>
          <Pressable onPress={()=>signOut(auth)} style={styles.logoutBtnDrawer}>
            <MaterialIcons name="logout" size={18} color="#fff" />
            <Text style={styles.logoutTxtDrawer}>Logout</Text>
          </Pressable>
        
      

